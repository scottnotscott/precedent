datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userStats     UserStats[]    // add this line to link the User to their UserStats
  userInventory UserInventory[] // add this line to link the User to their UserInventory
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserStats {
  id       String @id @default(cuid())
  userId   String @unique
  hp       Int @default(100)
  str      Int @default(1)
  def      Int @default(1)
  mag      Int @default(1)
  res      Int @default(1)
  rng      Int @default(1)
  eva      Int @default(1)
  level    Int @default(1)
  exp      Int @default(0)
  online_status Boolean @default(true)
  rank     String @default("Student")
  bio      String @default("Nothing to see here")
  village  String @default("Kinyo")
  activity Activity @default(IDLE)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model UserInventory {
  id       String @id @default(cuid())
  userId   String @unique
  slot01   String @default("Empty")
  slot02   String @default("Empty")
  slot03   String @default("Empty")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model ServerInformation {
  id        String @id @default(cuid())
  version   String @default("0.01")
}

enum Activity {
  IDLE
  TRAINING
  COMBAT
}

model Monsters {
  id      Int @id @default(autoincrement())
  name    String
  monster_type    Monster_type @default(MELEE)
  monster_rarity  Monster_rarity @default(NORMAL)
  monster_affix   Monster_affix @default(NONE)
  image           String?
  level           Int @default(1)
  base_hp         Int @default(100)
  base_str        Int @default(1)
  base_def        Int @default(1)
  base_mag        Int @default(1)
  base_res        Int @default(1)
  base_rng        Int @default(1)
  base_eva        Int @default(1)
  description     String?
  currency_reward Int @default(10)
  item_loot_table Item_loot_table @default(GLOBAL)
  xp_reward       Int @default(5)
}

enum Monster_type {
  MELEE
  RANGED
  MAGIC
}

enum Monster_rarity {
  NORMAL
  RARE
  MAGIC
  EXOTIC
  LEGENDARY
}

enum Monster_affix {
  NONE
  BERSERK
  BRUTE
  ANCIENT
  NIMBLE
}

enum Item_loot_table {
  GLOBAL
  NORMAL
  RARE
  EXOTIC
}