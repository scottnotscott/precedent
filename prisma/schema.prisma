datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userStats     UserStats[]    // add this line to link the User to their UserStats
  userInventory UserInventory[] // add this line to link the User to their UserInventory
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserStats {
  id       String @id @default(cuid())
  userId   String @unique
  hp       Int @default(100)
  str      Int @default(1)
  def      Int @default(1)
  mag      Int @default(1)
  res      Int @default(1)
  rng      Int @default(1)
  eva      Int @default(1)
  level    Int @default(1)
  exp      Int @default(0)
  online_status Boolean @default(true)
  rank     String @default("Student")
  bio      String @default("Nothing to see here")
  village  String @default("Kinyo")
  activity Activity @default(IDLE)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model UserInventory {
  id       String @id @default(cuid())
  userId   String @unique
  slot01   String? // Change this line to make it nullable
  slot02   String? // Change this line to make it nullable
  slot03   String? // Change this line to make it nullable
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}


enum Activity {
  IDLE
  TRAINING
  COMBAT
}

model LootTableType {
  id      String @id @default(cuid())
  name    String @unique
  lootTables LootTable[]
}

model LootTable {
  id           String       @id @default(cuid())
  lootTableTypeId String
  itemId       String
  dropChance   Float
  rarity       Rarity
  item         Item         @relation(fields: [itemId], references: [id])
  lootTableType LootTableType @relation(fields: [lootTableTypeId], references: [id])
}

model StatModifier {
  id       String  @id @default(cuid())
  stat     String
  modifier Int
  items    Item[]  @relation("ItemStatModifiers")
}

model Item {
  id            String        @id @default(cuid())
  name          String
  type          String
  rarity        String
  image         String
  shop_value    String?
  tradeable     Boolean       @default(false)
  statModifiers StatModifier[] @relation("ItemStatModifiers")
  lootTables    LootTable[]   // Add this line to fix the error
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  JACKPOT
}