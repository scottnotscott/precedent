datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userStats     UserStats[]    
  userInventory UserInventory[] 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserStats {
  id       String @id @default(cuid())
  userId   String @unique
  hp       Int @default(100)
  hp_current Int @default(100)
  str      Int @default(1)
  def      Int @default(1)
  mag      Int @default(1)
  res      Int @default(1)
  rng      Int @default(1)
  eva      Int @default(1)
  level    Int @default(1)
  exp      Int @default(0)
  online_status Boolean @default(true)
  rank     String @default("Student")
  bio      String @default("Nothing to see here")
  village  String @default("Kinyo")
  activity Activity @default(IDLE)
  unlockedAbilities Json?
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model UserInventory {
  id       String @id @default(cuid())
  userId   String @unique
  slot01   Json? 
  slot02   Json? 
  slot03   Json? 
  slot04   Json?
  slot05   Json?
  slot06   Json?
  slot07   Json?
  slot08   Json?
  slot09   Json?
  slot10   Json?
  slot11   Json?
  slot12   Json?
  slot13   Json?
  slot14   Json?
  slot15   Json?
  slot16   Json?
  slot17   Json?
  slot18   Json?
  slot19   Json?
  slot20   Json?
  slot21   Json?
  slot22   Json?
  slot23   Json?
  slot24   Json?
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}


enum Activity {
  IDLE
  TRAINING
  COMBAT
}

model LootTableType {
  id      String @id @default(cuid())
  name    String @unique
  lootTables LootTable[]
}

model LootTable {
  id           String       @id @default(cuid())
  lootTableTypeId String
  dropChance   Float
  rarity       Rarity
  items         Item[]        @relation("LootTableItems")
  lootTableType LootTableType @relation(fields: [lootTableTypeId], references: [id])
}

model StatModifier {
  id       String  @id @default(cuid())
  stat     String
  modifier Int
  items    Item[]  @relation("ItemStatModifiers")
}

model Item {
  id            String        @id @default(cuid())
  name          String
  type          String
  rarity        String
  image         String
  shop_value    String?
  tradeable     Boolean       @default(false)
  stackable     Boolean       @default(true)
  stackLimit    Int           @default(1)
  statModifiers StatModifier[] @relation("ItemStatModifiers")
  lootTables    LootTable[]   @relation("LootTableItems")
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  JACKPOT
}